name: Deploy React + Vite App to S3 and Invalidate CloudFront

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build React App
        run: npm run build

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: "build"

      - name: Set Cache Control Headers
        run: |
          # Set cache control for HTML files (no cache)
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/index.html s3://${{ secrets.S3_BUCKET_NAME }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate, max-age=0, s-maxage=0" \
            --metadata-directive REPLACE
          
          # Set cache control for JS/CSS files (cache for 1 year with versioning)
          aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/assets/ s3://${{ secrets.S3_BUCKET_NAME }}/assets/ \
            --recursive \
            --cache-control "public, max-age=31536000, immutable" \
            --metadata-directive REPLACE
          
          # Force CloudFront to fetch fresh content
          echo "Forcing CloudFront to fetch fresh content..."
          
          # Add a timestamp file to force refresh
          echo "Build timestamp: $(date)" | aws s3 cp - s3://${{ secrets.S3_BUCKET_NAME }}/build-timestamp.txt
          
          # Force refresh of all HTML files
          find build -name "*.html" -exec aws s3 cp {} s3://${{ secrets.S3_BUCKET_NAME }}/{} --cache-control "no-cache, no-store, must-revalidate, max-age=0, s-maxage=0" --metadata-directive REPLACE \;
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: Invalidate CloudFront Cache
        run: |
          # Create invalidation for all files
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          
          # Create specific invalidation for critical files
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/index.html" "/assets/*"
          
          # Create invalidation for timestamp file
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/build-timestamp.txt"
          
          # Wait for invalidation to complete
          echo "Waiting for CloudFront invalidation to complete..."
          sleep 90
          
          echo "CloudFront invalidation completed. Site should refresh within 5-10 minutes."
          
          # Force a second invalidation after waiting
          echo "Creating second invalidation to ensure refresh..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
          
          # Create invalidation with unique reference to force refresh
          echo "Creating invalidation with unique reference..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --cli-input-json "{\"DistributionId\":\"${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}\",\"InvalidationBatch\":{\"Paths\":{\"Quantity\":1,\"Items\":[\"/*\"]},\"CallerReference\":\"deployment-$(date +%s)\"}}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
